1.
public class MyClass {
 static String str = "a";
 public static void main(String[] args) {
 new MyClass().method1();
 System.out.println(str);
 }
 void method1() {
 try {
 method2();
 } catch (Exception e) {
 str += "b";
 }
 }
 void method2() throws Exception {
 try{
 method3();
 str += "c";
 }catch(Exception e){
 throw new Exception();
 }finally{
 str += "d";
 }
 method3();
 str += "e";
 }
 void method3() throws Exception {
 throw new Exception();
 }
}

2.===================================================
public class ExceptionTest {
 public static void main(String[] args) {
 m(); //call recursive method m()
 System.out.println("Code after exception handling");
 }

 static void m() {
 try {
 m();
 } catch (StackOverflowError e) {
 e.printStackTrace();
 }
 }
3.=================================================
public class ExceptionTest {
 public static void main(String[] args) {
 int i=10/0;
 System.out.println("Did this line execute?");
 }
}
4.===================================================
public class ExceptionTest {
 public static void main(String[] args) {

 try{
 int i=10/0;
 }catch(Exception e){
 System.out.println("Exception handled properly in catch block");
 }
 System.out.println("Code after exception handling");
 }
}
5.=======================================================
public class ExceptionTest {
 public static void main(String[] args) {

 try{
 int i=10/0; //will throw ArithmeticException
 }catch(ArithmeticException e){
 System.out.println("ArithmeticException handled in catch block");
 }
 finally{
 System.out.println("finally block executed");
 }
 System.out.println("code after try-catch-finally block");
 }
}
6.=============================================================
public class ExceptionTest {
 public static void main(String[] args) {
 try{
 System.out.println("in try block");
 System.exit(0);
 }finally{
 System.out.println("finally block executed");
 }
 }
}
7.==============================================================
public class ExceptionTest {
 public static void main(String[] args) {
 try{
 int i=10/0;
 }catch(IndexOutOfBoundsException e){
 System.out.println("IndexOutOfBoundsException handled in catch
block");
 }
 finally{
 System.out.println("finally block executed");
 }
 System.out.println("code after try-catch-finally block");
 }
}
8.===============================================================
public class ExceptionTest {
 public static void main(String[] args) {
 System.out.println("method return -> "+m());
 }

 static String m(){
 try{
 int i=10/0;
 }catch(ArithmeticException e){
 return "catch";
 }finally{
 return "finally";
 }

 }
}
9.===============================================================
public class ExceptionTest {
 public static void main(String[] args) {

 try{
 int i=10/0;
 }catch(ArithmeticException ae){
 System.out.println("Exception handled - ArithmeticException");
 }catch(RuntimeException re){
 System.out.println("Exception handled - RuntimeException");
 }catch(Exception e){
 System.out.println("Exception handled - Exception");
 }
 }
}
10.========================================================
public class ExceptionTest {
 public static void main(String[] args) {
 try{
 int i=10/0;
 }catch(Exception e){
 System.out.println("Exception handled - RuntimeException");
 }catch(ArithmeticException ae){
 System.out.println("Exception handled - ArithmeticException");
 }
 }
}
11.========================================================
public class MyClass {
 static String s = "";

 public static void main(String[] args) {
 //try-catch-finally
 try {
 throw new Exception();
 } catch (Exception e) {
 //1st nested try-catch-finally
 try {
 //2nd nested try-catch-finally
 try {
 throw new Exception();
 } catch (Exception ex) {
 s += "a";
 } finally{
 s += "b";
 }
throw new Exception();
 } catch (Exception x) {
 s += "c";
 } finally {
 s += "d";
 }
 } finally {
 s += "e";
 }
 System.out.println(s);
 }
}
12.=============================================================14

public class ExceptionTest {
 public static void main(String[] args) {
 try{
 throw new IOException();
 }catch(IOException | Exception ex){
 System.out.println(ex + " handled ");
 }
 }
}
13.=============================================================
public class ExceptionTest {
 public static void main(String[] args)
 {
 method1();
 System.out.println("after calling m()");
 }

 static void method1(){
 method2();
 }

 static void method2(){
 method3();
 }

 static void method3(){
 throw new NullPointerException();
 }


}
14.================================================================
public class ExceptionTest {
 public static void main(String[] args)
 throws FileNotFoundException {
 method1();
 System.out.println("after calling m()");
 }

 static void method1() throws FileNotFoundException{
 method2();
 }

 static void method2() throws FileNotFoundException{
 method3();
 }
 static void method3() throws FileNotFoundException{
 throw new FileNotFoundException();
 }

}
15.============================================================

public class TryWithResourseTest {
 public static void main(String[] args) throws IOException {
 try (InputStream inputStream = new FileInputStream("c:/txtFile.txt")) {
 //code...
 }
 }
16.==================================================================

public class TryWithResourseTest {
 public static void main(String[] args) throws IOException {
 try (InputStream inputStream = new FileInputStream("c:/txtFile.txt") ;
 InputStream bInputStream = new BufferedInputStream(inputStream)
) {
 //code...
 }
 }
}
17.=====================================================20

public class ExceptionTest {
 public static void main(String[] args) {
 m();
 System.out.println("after calling m()");
 }
 static void m(){
 throw new FileNotFoundException();
 }
}
18.================================================
public class ExceptionTest {
 public static void main(String[] args) {
 m();
 System.out.println("after calling m()");
 }
 static void m(){
 try {
 throw new FileNotFoundException();
 } catch (FileNotFoundException e) {
 System.out.println("FileNotFoundException handled in try-catch
block");
 }
 }
}
19.=================================================5
public class ExceptionTest {
public static void main(String[] args) {
 try {
 m();
 System.out.print("a");
 } catch (Exception e) {
 System.out.print("b");
 } finally{
 System.out.print("c");
 }
 }
 static void m() throws IOException, SQLException{
 int i=1;
 if(i==1)
 throw new IOException();
 else
 throw new SQLException();
 }
}
20.==========================================================
class SuperClass{
 void method() throws NullPointerException{
 System.out.println("superClass method");
 }
}
class SubClass extends SuperClass{
 void method() throws RuntimeException{
 System.out.println("SubClass method");
 }
}

public class ExceptionTest {
 public static void main(String[] args) {
 SuperClass obj=new SubClass();
 obj.method();
 }
}
21.=================================================44
class SuperClass{
 void method(){
 System.out.println("superClass method");
 }
}
class SubClass extends SuperClass{
 void method() throws NullPointerException{
 System.out.println("SubClass method");
 }
}

public class ExceptionTest {
 public static void main(String[] args) throws Exception {
 SuperClass obj=new SubClass();
 obj.method();
 }
}




